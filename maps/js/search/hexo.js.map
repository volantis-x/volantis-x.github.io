{"version":3,"file":"../../../js/search/hexo.js","names":["SearchService","fn","async","div","document","createElement","innerHTML","template","body","append","querySelectorAll","forEach","e","addEventListener","onSubmit","querySelector","close","data","fetchData","event","preventDefault","input","target","queryText","value","search","style","display","results","buildResultList","pages","posts","volantis","GLOBAL_CONFIG","languages","hits_empty","replace","f","code","removeEventListener","fetch","dataPath","then","response","text","res","JSON","parse","html","post","title","trim","slice","contentSearch","buildResult","permalink","digest","post_title","toLowerCase","post_content","keywords","split","foundMatch","index_title","index_content","first_occur","word","index","indexOf","start","end","Math","max","min","length","match_content","substring","keyword","regS","RegExp","url","getUrlRelativePath","arrUrl","relUrl","init","setQueryText","Object","freeze"],"sources":["js/search/hexo.js"],"mappings":"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","ignoreList":[],"sourcesContent":["let SearchService = (() => {\n  const fn = {};\n  fn.queryText = null;\n  fn.data = null;\n  fn.template = `<div id=\"u-search\">\n  <div class=\"modal\">\n    <header class=\"modal-header\" class=\"clearfix\">\n      <form id=\"u-search-modal-form\" class=\"u-search-form\" name=\"uSearchModalForm\">\n        <input type=\"text\" id=\"u-search-modal-input\" class=\"u-search-input\" />\n        <button type=\"submit\" id=\"u-search-modal-btn-submit\" class=\"u-search-btn-submit\">\n          <span class=\"fa-solid fa-search\"></span>\n        </button>\n      </form>\n      <a id=\"u-search-btn-close\" class=\"btn-close\"> <span class=\"fa-solid fa-times\"></span> </a>\n    </header>\n    <main class=\"modal-body\">\n      <ul class=\"modal-results\"></ul>\n    </main>\n  </div>\n  <div id=\"modal-overlay\" class=\"modal-overlay\"></div>\n</div>\n`;\n  fn.init = async () => {\n    let div = document.createElement(\"div\");\n    div.innerHTML += fn.template;\n    document.body.append(div);\n    document.querySelectorAll(\".u-search-form\").forEach((e) => {\n      e.addEventListener(\"submit\", fn.onSubmit, false);\n    });\n    let uSearchModalInput = document.querySelector(\"#u-search-modal-input\");\n    uSearchModalInput.addEventListener(\"input\", fn.onSubmit);\n    document\n      .querySelector(\"#u-search-btn-close\")\n      .addEventListener(\"click\", fn.close, false);\n    document\n      .querySelector(\"#modal-overlay\")\n      .addEventListener(\"click\", fn.close, false);\n    if (!fn.data) {\n      fn.data = await fn.fetchData();\n    }\n  };\n  fn.onSubmit = (event) => {\n    event.preventDefault();\n    let input = event.target.querySelector(\".u-search-input\");\n    if (input) {\n      fn.queryText = input.value;\n    } else {\n      fn.queryText = event.target.value;\n    }\n\n    if (fn.queryText) {\n      fn.search();\n    }\n  };\n  fn.search = async () => {\n    document.querySelectorAll(\".u-search-input\").forEach((e) => {\n      e.value = fn.queryText;\n    });\n    document.querySelector(\"#u-search\").style.display = \"block\";\n    if (!fn.data) {\n      fn.data = await fn.fetchData();\n    }\n    let results = \"\";\n    results += fn.buildResultList(fn.data.pages);\n    results += fn.buildResultList(fn.data.posts);\n    if (results === \"\") {\n      results = `<div id=\"resule-hits-empty\"><i class=\"fa-solid fa-box-open\"></i><p>${volantis.GLOBAL_CONFIG.languages.search.hits_empty.replace(/\\$\\{query}/, fn.queryText)}</p></div>`\n    }\n    document.querySelector(\"#u-search .modal-results\").innerHTML = results;\n    document.addEventListener(\"keydown\", function f(event) {\n      if (event.code === \"Escape\") {\n        fn.close();\n        document.removeEventListener(\"keydown\", f);\n      }\n    });\n  };\n  fn.close = () => {\n    document.querySelector(\"#u-search\").style.display = \"none\";\n  };\n  fn.fetchData = () => {\n    return fetch(volantis.GLOBAL_CONFIG.search.dataPath)\n      .then((response) => response.text())\n      .then((res) => {\n        const data = JSON.parse(res);\n        // console.log(data);\n        return data;\n      });\n  };\n  fn.buildResultList = (data) => {\n    let html = \"\";\n    data.forEach((post) => {\n      if (post.text) {\n        post.text = post.text.replace(/12345\\d*/g, \"\") // 简易移除代码行号\n      }\n      if (!post.title && post.text) {\n        post.title = post.text.trim().slice(0, 15)\n      }\n      if (fn.contentSearch(post)) {\n        html += fn.buildResult(post.permalink, post.title, post.digest);\n      }\n    });\n    return html;\n  };\n  fn.contentSearch = (post) => {\n    let post_title = post.title.trim().toLowerCase();\n    let post_content = post.text.trim().toLowerCase();\n    let keywords = fn.queryText\n      .trim()\n      .toLowerCase()\n      .split(/[-\\s]+/);\n    let foundMatch = false;\n    let index_title = -1;\n    let index_content = -1;\n    let first_occur = -1;\n    if (post_title && post_content) {\n      keywords.forEach((word, index) => {\n        index_title = post_title.indexOf(word);\n        index_content = post_content.indexOf(word);\n        if (index_title < 0 && index_content < 0) {\n          foundMatch = false;\n        } else {\n          foundMatch = true;\n          if (index_content < 0) {\n            index_content = 0;\n          }\n          if (index === 0) {\n            first_occur = index_content;\n          }\n        }\n        if (foundMatch) {\n          post_content = post.text.trim();\n          let start = 0;\n          let end = 0;\n          if (first_occur >= 0) {\n            start = Math.max(first_occur - 40, 0);\n            end =\n              start === 0\n                ? Math.min(200, post_content.length)\n                : Math.min(first_occur + 120, post_content.length);\n            let match_content = post_content.substring(start, end);\n            keywords.forEach(function (keyword) {\n              let regS = new RegExp(keyword, \"gi\");\n              match_content = match_content.replace(\n                regS,\n                \"<b mark>\" + keyword + \"</b>\"\n              );\n            });\n            post.digest = match_content + \"......\";\n          } else {\n            end = Math.min(200, post_content.length);\n            post.digest = post_content.trim().substring(0, end);\n          }\n        }\n      });\n    }\n    return foundMatch;\n  };\n  fn.buildResult = (url, title, digest) => {\n    let result = fn.getUrlRelativePath(url);\n    let html = \"\";\n    html += \"<li>\";\n    html +=\n      \"<a class='result' href='\" + result + \"?keyword=\" + fn.queryText + \"'>\";\n    html += \"<span class='title'>\" + title + \"</span>\";\n    if (digest !== \"\") html += \"<span class='digest'>\" + digest + \"</span>\";\n    html += \"</a>\";\n    html += \"</li>\";\n    return html;\n  };\n  fn.getUrlRelativePath = function (url) {\n    let arrUrl = url.split(\"//\");\n    let start = arrUrl[1].indexOf(\"/\");\n    let relUrl = arrUrl[1].substring(start);\n    if (relUrl.indexOf(\"?\") != -1) {\n      relUrl = relUrl.split(\"?\")[0];\n    }\n    return relUrl;\n  };\n  return {\n    init: () => {\n      fn.init();\n    },\n    setQueryText: (queryText) => {\n      fn.queryText = queryText;\n    },\n    search: () => {\n      fn.search();\n    },\n  };\n})();\nObject.freeze(SearchService);\n\nSearchService.init();\n"]}